{"createdAt":"2025-06-01T06:30:47.497Z","updatedAt":"2025-06-01T11:43:10.000Z","id":"Dwe6GBk7JZXxRc7y","name":"Telegram Conversational Bot","active":false,"isArchived":false,"nodes":[{"parameters":{"assignments":{"assignments":[{"id":"b3ce66e0-2b6f-4714-a672-59ef6e43ced9","name":"prompt","type":"string","value":"=1. Rules\n- Communicate formally, clearly, and respectfully at all times.\n- Be concise and precise, avoiding unnecessary details.\n- Maintain a positive, professional tone as a reliable and knowledgeable assistant.\n- Respect user boundaries and refrain from engaging in prohibited or inappropriate topics.\n- Keep the conversation engaging by encouraging user participation, but when requesting clarification or additional information, ask only one focused question at a time to avoid overwhelming the user. Avoid abrupt endings to the dialogue.\n- Follow user instructions precisely.\n- Do not include any additional text or explanations unless explicitly requested.\n\n2. Response instructions\n- Analyze the message and conversation history to maintain context and continuity.\n- If repetition is requested, return the message exactly as provided. Otherwise, respond clearly and appropriately based on intent and context.\n- If the message is vague, suggest an interpretation and ask for clarification while keeping the conversation active."}]},"options":{}},"id":"dc075488-a0b6-48d9-afe0-393a7e313526","name":"chatPrompt1","type":"n8n-nodes-base.set","position":[1660,1560],"typeVersion":3.4},{"parameters":{"assignments":{"assignments":[{"id":"d78c64d5-3c9e-4ffd-875e-973eb3c4d20a","name":"prompt","type":"string","value":"=1. Rules\n- Communicate formally, clearly, and respectfully at all times.\n- Be concise and precise, avoiding unnecessary details.\n- Maintain a positive, professional tone as a reliable and knowledgeable assistant.\n- Respect user boundaries and refrain from engaging in prohibited or inappropriate topics.\n- Keep the conversation engaging by encouraging user participation, but when requesting clarification or additional information, ask only one focused question at a time to avoid overwhelming the user. Avoid abrupt endings to the dialogue.\n- Follow user instructions precisely.\n- Do not include any additional text or explanations unless explicitly requested.\n\n2. General Instructions\n- If a message is unclear or lacks details, respond with your best understanding as a suggestion, and politely ask the user to confirm or provide more details if it is not what they meant.\n- If the request is inappropriate or irrelevant, respond politely and clearly refuse, maintaining respect and professionalism, and invite a valid request.\n- Always follow the established rules to maintain professionalism and accuracy."}]},"options":{}},"id":"2f474e73-ea40-4fc4-9a78-dee0302a43cc","name":"otherPrompt1","type":"n8n-nodes-base.set","position":[1660,1720],"typeVersion":3.4},{"parameters":{"assignments":{"assignments":[{"id":"70c93816-7110-48e3-a105-568dd766bdf4","name":"prompt","type":"string","value":"=1.  General instructions\nCreate a prompt that generates only one response with no comments and no line breaks. Based on the input provided, generate a detailed visual description of the request in a clear and coherent manner. Avoid using quotation marks, apostrophes, or any other punctuation marks.\n\n2. Visual specifications\n- Composition: maintain a balanced and harmonious layout where all elements (images, shapes, and text) work together seamlessly. Ensure that no part of the image feels overcrowded, and the design directs the viewer’s attention naturally. Use a minimalistic approach, avoiding excessive detail or distractions.\n\n- Color palette: choose a color scheme that complements the overall theme and enhances the mood. The colors should be visually pleasing and work together harmoniously. Use no more than 3-4 main colors to maintain simplicity and coherence, ensuring they do not overpower the design.\n\n- Visual clarity: the image should be crisp and clear, with all elements legible and easy to interpret. Avoid blurry or pixelated visuals. Maintain sharp contrasts between key elements for emphasis and visual clarity.\n\n- Image size and resolution: the image should be sized to fit standard display requirements (e.g., social media, web posts). Ensure the resolution is high enough for clarity on both desktop and mobile devices. The image must maintain visual quality without losing sharpness or details when viewed on different screens.\n\n- Aesthetic appeal: aim for a design that is not only functional but also visually appealing. The overall style should be modern, clean, and aesthetically pleasing, with a consistent look that aligns with the intended mood or message. Ensure the design is pleasing to the eye, evoking the intended response from the viewer.\n\n- Visual balance: ensure the elements in the image are well-spaced, with no part feeling too heavy or too light. Create a natural flow of focus, guiding the viewer’s eye through the composition without distraction."}]},"options":{}},"id":"99f38ed7-c490-4942-adee-6d489e56b8c7","name":"generatePrompt1","type":"n8n-nodes-base.set","position":[1660,1400],"typeVersion":3.4},{"parameters":{"assignments":{"assignments":[{"id":"f435e1c3-6ff9-4e68-852c-0a39a5903ebe","name":"prompt","type":"string","value":"={{ $json.prompt }}"}]},"includeOtherFields":true,"options":{}},"id":"764cc4ed-7771-4b4b-944c-e1ce20fd8a9c","name":"buildPrompt1","type":"n8n-nodes-base.set","position":[1800,1560],"typeVersion":3.4},{"parameters":{"promptType":"define","text":"=Input from user: {{ $('sessionData1').item.json.Message }}\n\n{{ $json.prompt }}\n\nRespond only with the exact text requested, strictly following the instructions above. ","options":{"systemMessage":"=You are a professional enterprise chatbot designed to assist users with clear, respectful, and accurate communication. You provide informative text responses and generate images only upon explicit user requests. Utilize available conversation history to maintain context and coherence. Adhere strictly to company rules to ensure appropriate and secure interactions.\n\nYou can chat with me to get answers and create custom images based on your instructions.\n\nPrioritize the most recent relevant message if multiple prior references exist. Always respond in English when providing text-based chat replies. For image generation requests, respond in English. Keep responses as short as possible without compromising clarity or natural interaction. Do not force interaction with the user beyond what is necessary to respond clearly."}},"id":"bc4f95cd-87bc-4930-833b-eb2faa55b31e","name":"ChatCore1","type":"@n8n/n8n-nodes-langchain.agent","position":[1940,1560],"typeVersion":1.9},{"parameters":{"modelName":"models/gemini-2.0-flash-001","options":{}},"id":"142861cd-ab10-4736-9cb4-09cbee3dc47f","name":"GeminiModel2","type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","position":[1960,1720],"typeVersion":1,"credentials":{"googlePalmApi":{"id":"3RdpYmKkFAm5Fytx","name":"Google Gemini(PaLM) Api account"}}},{"parameters":{"promptType":"define","text":"=1. Context\nYou are an intelligent assistant designed to analyze user requests accurately by considering both the current user input and prior conversation history (if available). Use this context to improve classification and response relevance. Only classify as \"generate\" if the request clearly meets all criteria. Never assume without certainty.\n\n2. General instructions\n- Use prior conversation history, if available, to interpret references, refinements, or corrections in the user’s message. \n- Apply updates directly when a previous request is being modified (e.g., changing part of a generated image).\n- Maintain context continuity unless the user explicitly shifts the topic.\n- When evaluating intention, prioritize the most recent relevant message to avoid using outdated context.\n- If the message is vague, nonsensical, or overly brief (e.g., a single word), do not classify it as \"generate\". Even if image requests occurred earlier. Only proceed if the current input clearly meets all criteria. Default to \"other\" unless the message includes clear direction.\n\n3. User Request: \"{{ $('sessionData1').item.json.Message }}\"\n\n4. Conversation history:\n{{ $json.messages}}\n\n5. Intentions\nClassify the user's intention as exactly one of the following:\n- \"generate\": user requests the direct creation of new visual content (e.g., images or art) to be delivered. This includes implicit requests for physical or tangible objects (e.g., \"give me a pet\"), but only if the message contains clear intent or is supported by prior context. Single-word or vague inputs without clear directive or context should not be treated as generate.\n- \"chat\": user engages in meaningful conversational interaction, including requests to generate textual prompts, explanations, or dialogue that have clear context and intent.\n- \"other\": request does not fit into the above categories, or involves content that is restricted, inappropriate, irrelevant, nonsensical, or lacks clear context or intent distinct from conversational engagement.\n\n6. Data types\nWhen analyzing the user’s message, determine whether a request for a physical or tangible object should be interpreted as a visual content request. In general, treat requests for tangible items as image generation unless the context explicitly suggests otherwise. For intangible content, respond with text unless the user clearly asks for an image.\n\nBased on the intention and content of the request, select exactly one data type to return:\n\n- \"text\": a textual response such as an answer, explanation, dialogue, or prompt text.\n- \"image\": a visual response explicitly or implicitly requested as image generation.\n\nAssign \"image\" as typeData only if the intention is \"generate\". In all other cases, including when the intention is \"other\", assign \"text\".\n\n7. Output format\nRespond only with a JSON object in this exact format, with no additional text or explanation: {\"intention\": \"value\", \"typeData\": \"value\"}","hasOutputParser":true},"id":"33e4b24b-8dbf-4a15-944d-cfad56b14d9b","name":"inputProcessor1","type":"@n8n/n8n-nodes-langchain.chainLlm","position":[1200,1560],"typeVersion":1.6,"alwaysOutputData":false},{"parameters":{"modelName":"models/gemini-2.0-flash","options":{}},"id":"53a10797-e4af-4951-bdb4-c28d66821479","name":"GeminiModel3","type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","position":[1220,1700],"typeVersion":1,"credentials":{"googlePalmApi":{"id":"3RdpYmKkFAm5Fytx","name":"Google Gemini(PaLM) Api account"}}},{"parameters":{"jsonSchemaExample":"{\n\t\"typeData\": \"text\",\n\t\"intention\": \"generate\"\n}"},"id":"94723cce-c7f8-4df6-8383-05f19354cf7b","name":"structuredOutput1","type":"@n8n/n8n-nodes-langchain.outputParserStructured","position":[1360,1700],"typeVersion":1.2},{"parameters":{"rules":{"values":[{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"24ab5811-2b6d-4f2f-8620-8697dadc2d4d","operator":{"type":"string","operation":"contains"},"leftValue":"={{ $('intentHandler1').item.json.output.typeData }}","rightValue":"image"}]},"renameOutput":true,"outputKey":"=Imagen"},{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"28759436-2f6a-4bb3-a9bf-924477241809","operator":{"type":"string","operation":"contains"},"leftValue":"={{ $('intentHandler1').item.json.output.typeData }}","rightValue":"text"}]},"renameOutput":true,"outputKey":"Texto"}]},"options":{}},"id":"1ffbc7bf-2ead-42d1-8eae-c84137fefa92","name":"contentType1","type":"n8n-nodes-base.switch","position":[2240,1640],"typeVersion":3.2},{"parameters":{"jsCode":"let texto = $input.first().json.prompt.replace(/[\\n\\r\\t]/g, \" \")  // Reemplaza saltos de línea, retorno de carro y tabulaciones por espacio\n  .replace(/['\"\\\\]/g, \"\")      // Elimina comillas simples, dobles y barras invertidas\n  .replace(/\\s+/g, \" \")        // Reemplaza múltiples espacios por un solo espacio\n  .trim();                     // Elimina los espacios en blanco al inicio y al final\n\nreturn {\n  text: texto\n}"},"id":"141fac86-8509-4199-9d3f-0df1f0486b8a","name":"textCleaner1","type":"n8n-nodes-base.code","position":[2480,1460],"typeVersion":2},{"parameters":{"method":"POST","url":"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent","authentication":"predefinedCredentialType","nodeCredentialType":"googlePalmApi","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"contents\": [\n    {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"text\": \"{{ $json.text }}\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"responseModalities\": [\"Text\", \"Image\"]\n  }\n}","options":{}},"id":"580944c7-b8ef-4656-b183-75cf0bc62947","name":"imageGeneration1","type":"n8n-nodes-base.httpRequest","position":[2600,1460],"typeVersion":4.2,"credentials":{"googlePalmApi":{"id":"ZVDoZ9qJ7Fkvbo9r","name":"Google Gemini(PaLM) Api account 2"}}},{"parameters":{"operation":"toBinary","sourceProperty":"candidates[0].content.parts[1].inlineData.data","options":{"fileName":"generated_image.png"}},"id":"6b954341-9f3a-45b3-99f3-59f04540c51d","name":"imageBuilder1","type":"n8n-nodes-base.convertToFile","position":[2720,1460],"typeVersion":1.1},{"parameters":{"operation":"sendPhoto","chatId":"={{ $('sessionData1').item.json.sessionId }}","binaryData":true,"additionalFields":{"fileName":"=generated_image.png"}},"id":"5db93e62-a924-4ce7-b2a3-a725be261055","name":"sendImage1","type":"n8n-nodes-base.telegram","position":[2840,1460],"webhookId":"511272cc-d9e3-4384-9407-e5d4296db621","typeVersion":1,"credentials":{"telegramApi":{"id":"MIsHtLlXOq4xu2sv","name":"Telegram account"}}},{"parameters":{"chatId":"={{ $('sessionData1').item.json.sessionId }}","text":"={{ $('ChatCore1').item.json.output }}","additionalFields":{"appendAttribution":false,"parse_mode":"HTML"}},"id":"5be6b513-35a4-4716-b6cc-5d61867af9f0","name":"sendTextMessage1","type":"n8n-nodes-base.telegram","position":[2840,1660],"webhookId":"1d1eee00-2306-4ac1-870f-0988e305f0d0","typeVersion":1,"credentials":{"telegramApi":{"id":"MIsHtLlXOq4xu2sv","name":"Telegram account"}}},{"parameters":{"keepOnlySet":true,"values":{"string":[{"name":"Message","value":"={{ $('userInput1').item.json.message.text }}"},{"name":"sessionId","value":"={{ $('userInput1').item.json.message.chat.id }}"},{"name":"Language","value":"={{ $('userInput1').item.json.message.from.language_code }}"},{"name":"Username","value":"={{ $('userInput1').item.json.message.chat.username }}"}]},"options":{}},"id":"9af5397e-5293-4585-b5be-e7ca6ad41072","name":"sessionData1","type":"n8n-nodes-base.set","position":[680,1560],"typeVersion":2},{"parameters":{"options":{"groupMessages":true}},"id":"c562d39f-6598-4665-81fc-d9d55aec9d1e","name":"conversationStore1","type":"@n8n/n8n-nodes-langchain.memoryManager","position":[800,1560],"typeVersion":1.1},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('sessionData1').item.json.sessionId }}","contextWindowLength":0},"id":"f6787469-8eae-41c1-87ca-2e71dd178c14","name":"memoryRetriever1","type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","position":[840,1700],"typeVersion":1.3},{"parameters":{"jsCode":"const allItems = $input.all();\nconst lastItem = allItems[allItems.length - 1];\n\nif (lastItem && Array.isArray(lastItem.json.messages)) {\n  const messages = lastItem.json.messages;\n  const count = messages.length;\n\n  if (count === 0) return [{ json: { message: \"\" } }];\n\n  const extractFirstLine = (text) => {\n    if (!text) return \"\";\n    return text.split('\\n')[0].replace(/^Input from user:\\s*/, '');\n  };\n\n  const trimEndNewline = (text) => {\n    if (!text) return \"\";\n    return text.replace(/\\n+$/, '');\n  };\n\n  // Tomar los últimos dos o menos mensajes\n  const selectedMessages = (count === 1) ? [messages[0]] : messages.slice(-1);\n\n  // Construir el texto concatenado\n  const combinedMessage = selectedMessages.map((msg, idx) => {\n    return `Message ${idx + 1}:\\nhuman: ${extractFirstLine(msg.human)}\\nai: ${trimEndNewline(msg.ai)}`;\n  }).join('\\n\\n');\n\n  return [{ json: { messages: combinedMessage } }];\n}\n\nreturn [{ json: { messages: \"\" } }];"},"id":"221d12b4-4a83-4f25-bf16-c6b3981684e8","name":"latestContext1","type":"n8n-nodes-base.code","position":[1080,1560],"typeVersion":2},{"parameters":{"rules":{"values":[{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"24ab5811-2b6d-4f2f-8620-8697dadc2d4d","operator":{"type":"string","operation":"contains"},"leftValue":"={{ $json.output.intention }}","rightValue":"generate"}]},"renameOutput":true,"outputKey":"generate"},{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"28759436-2f6a-4bb3-a9bf-924477241809","operator":{"type":"string","operation":"contains"},"leftValue":"={{ $json.output.intention }}","rightValue":"chat"}]},"renameOutput":true,"outputKey":"chat"},{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"de4b6e87-950e-461c-869f-d27c73f8d763","operator":{"type":"string","operation":"contains"},"leftValue":"={{ $json.output.intention }}","rightValue":"other"}]},"renameOutput":true,"outputKey":"other"}]},"options":{}},"id":"f4da29be-4d18-43f7-b628-df7d64f73325","name":"intentHandler1","type":"n8n-nodes-base.switch","position":[1480,1560],"typeVersion":3.2},{"parameters":{"updates":["message"],"additionalFields":{}},"id":"aefaf386-ee36-48c0-ab49-9c7d6aebd7cb","name":"userInput1","type":"n8n-nodes-base.telegramTrigger","position":[560,1560],"webhookId":"ddbf3f08-3f4d-446d-9378-054225c91a06","typeVersion":1,"credentials":{"telegramApi":{"id":"MIsHtLlXOq4xu2sv","name":"Telegram account"}}},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('sessionData1').item.json.sessionId }}","contextWindowLength":10},"id":"b74b73c5-8aef-49d7-84bd-c235ce5b711c","name":"conversationMemory1","type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","position":[2080,1740],"typeVersion":1.3},{"parameters":{"assignments":{"assignments":[{"id":"d11831d7-533b-4132-9849-612e093d6b32","name":"prompt","type":"string","value":"={{ $('ChatCore1').item.json.output }} It is mandatory to add a description of the image you are going to make."}]},"options":{}},"id":"782cec22-b696-44d1-8695-e0ee65bfae1d","name":"errorPreprocessor1","type":"n8n-nodes-base.set","position":[2360,1460],"typeVersion":3.4},{"parameters":{"content":"### 2. Memory and Conversational Context\n\nRetrieves the necessary context to properly infer intentions.\n\n- conversationStore: stores the entire conversation history.\n\n- memoryRetriever: extracts relevant information according to the current need.\n\n- latestContext: formats and prepares the context to be useful in response generation.\n","height":680,"width":380,"color":4},"id":"c591d4d1-b387-460d-af58-d1fba3e1db78","name":"Sticky Note5","type":"n8n-nodes-base.stickyNote","position":[800,1200],"typeVersion":1},{"parameters":{"content":"### 1. Input and Session Management\n\nReceives messages from Telegram and manages the session to maintain context.\n\n- userInput: captures the user's message.\n\n- sessionData: saves and updates the session state.\n","height":680,"width":340,"color":5},"id":"67552108-cd0a-4e52-9cb6-c38f8b226d52","name":"Sticky Note6","type":"n8n-nodes-base.stickyNote","position":[440,1200],"typeVersion":1},{"parameters":{"content":"### 3. Intent Processing and Prompt Generation\nAnalyzes the intention and selects appropriate prompts according to the user's intention.\n\n- inputProcessor: detects intention and type of content to send.\n\n- intentHandler: redirects the flow based on the intention.\n\n- generatePrompt, chatPrompt, otherPrompt, buildPrompt: select the prompts for the response.","height":680,"width":700,"color":6},"id":"c5797671-7e34-4366-99fe-3b12181da8a0","name":"Sticky Note7","type":"n8n-nodes-base.stickyNote","position":[1200,1200],"typeVersion":1},{"parameters":{"content":"### 4. Core of Generation and Conversation Management\nGenerates responses using Google Gemini, integrating context for coherence.\n\n- ChatCore: orchestrates the generation and management of the conversation.\n\n- GeminiModel: creates the final response based on prompts.\n\n- conversationMemory: stores information to maintain coherence.","height":680,"width":300,"color":3},"id":"256260fb-f3e6-4f27-92fd-faa5386925a2","name":"Sticky Note8","type":"n8n-nodes-base.stickyNote","position":[1920,1200],"typeVersion":1},{"parameters":{"content":"### 5. Content Classification and User Delivery\n\nDetermines the type of content and manages its delivery via Telegram.\n\n- contentType: defines the output format (text, image, etc.).\n\n- errorPreprocessor, textCleaner: clean and validate the content.\n\n- imageGeneration, imageBuilder: create visual content when necessary.\n\n- sendImage, sendTextMessage: send the content to the user.","height":680,"width":800,"color":7},"id":"9da0222b-bbe4-40f3-880a-fb2618a18ec9","name":"Sticky Note9","type":"n8n-nodes-base.stickyNote","position":[2240,1200],"typeVersion":1}],"connections":{"chatPrompt1":{"main":[[{"node":"buildPrompt1","type":"main","index":0}]]},"otherPrompt1":{"main":[[{"node":"buildPrompt1","type":"main","index":0}]]},"generatePrompt1":{"main":[[{"node":"buildPrompt1","type":"main","index":0}]]},"buildPrompt1":{"main":[[{"node":"ChatCore1","type":"main","index":0}]]},"ChatCore1":{"main":[[{"node":"contentType1","type":"main","index":0}]]},"GeminiModel2":{"ai_languageModel":[[{"node":"ChatCore1","type":"ai_languageModel","index":0}]]},"inputProcessor1":{"main":[[{"node":"intentHandler1","type":"main","index":0}]]},"GeminiModel3":{"ai_languageModel":[[{"node":"inputProcessor1","type":"ai_languageModel","index":0}]]},"structuredOutput1":{"ai_outputParser":[[{"node":"inputProcessor1","type":"ai_outputParser","index":0}]]},"contentType1":{"main":[[{"node":"errorPreprocessor1","type":"main","index":0}],[{"node":"sendTextMessage1","type":"main","index":0}]]},"textCleaner1":{"main":[[{"node":"imageGeneration1","type":"main","index":0}]]},"imageGeneration1":{"main":[[{"node":"imageBuilder1","type":"main","index":0}]]},"imageBuilder1":{"main":[[{"node":"sendImage1","type":"main","index":0}]]},"sessionData1":{"main":[[{"node":"conversationStore1","type":"main","index":0}]]},"conversationStore1":{"main":[[{"node":"latestContext1","type":"main","index":0}]]},"memoryRetriever1":{"ai_memory":[[{"node":"conversationStore1","type":"ai_memory","index":0}]]},"latestContext1":{"main":[[{"node":"inputProcessor1","type":"main","index":0}]]},"intentHandler1":{"main":[[{"node":"generatePrompt1","type":"main","index":0}],[{"node":"chatPrompt1","type":"main","index":0}],[{"node":"otherPrompt1","type":"main","index":0}]]},"userInput1":{"main":[[{"node":"sessionData1","type":"main","index":0}]]},"conversationMemory1":{"ai_memory":[[{"node":"ChatCore1","type":"ai_memory","index":0}]]},"errorPreprocessor1":{"main":[[{"node":"textCleaner1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"5bc3d22e-b1f4-4818-83e5-4503a1fe02bc","triggerCount":1,"tags":[]}